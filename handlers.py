from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.dispatcher import FSMContext
from api_client import ask_gpt
from database import *
import os


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üñêÔ∏è –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è"))
    kb.add(KeyboardButton("üåü –ì–æ—Ä–æ—Å–∫–æ–ø"))
    kb.add(KeyboardButton("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"))
    kb.add(KeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"))
    kb.add(KeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    return kb

def subscribe_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("1 –¥–µ–Ω—å ‚Äî 100‚ÇΩ", callback_data="pay_day"),
        InlineKeyboardButton("7 –¥–Ω–µ–π ‚Äî 350‚ÇΩ", callback_data="pay_week"),
        InlineKeyboardButton("30 –¥–Ω–µ–π ‚Äî 1350‚ÇΩ", callback_data="pay_month")
    )
    return kb

def horoscope_type_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="horo_today"),
        InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="horo_week"),
        InlineKeyboardButton("–ù–∞ –º–µ—Å—è—Ü", callback_data="horo_month"),
        InlineKeyboardButton("–ù–∞ –≥–æ–¥", callback_data="horo_year")
    )
    return kb



async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ü—Ä–æ–≤–∏–¥–µ—Ü!\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=main_menu()
    )

@dp.message_handler(lambda m: m.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
async def free_trial(message: types.Message):
    user_id = message.from_user.id
    access = await check_access(pool, user_id)
    if access == "trial":
        await set_trial_used(pool, user_id)
        await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.", reply_markup=main_menu())
    else:
        await message.answer("–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=subscribe_menu())

@dp.message_handler(lambda m: m.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def pay_options(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscribe_menu())



# ========== –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è ==========
async def chiromancy_start(message: types.Message, state: FSMContext):
    await state.set_state(Chiromancy.waiting_left.state)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –õ–ï–í–û–ô –ª–∞–¥–æ–Ω–∏")

async def chiromancy_left(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(left_hand=file_id)
    await state.set_state(Chiromancy.waiting_right.state)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ü–†–ê–í–û–ô –ª–∞–¥–æ–Ω–∏")

async def chiromancy_right(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    data = await state.get_data()
    left_file_id = data.get("left_hand")

    prompt = (
        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ö–∏—Ä–æ–º–∞–Ω—Ç —Å 30-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –î–∞–π –≥–ª—É–±–æ–∫–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–≤—É–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ª–∞–¥–æ–Ω–µ–π –∫–ª–∏–µ–Ω—Ç–∞. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏–Ω–∏–∏ –∂–∏–∑–Ω–∏, —Å–µ—Ä–¥—Ü–∞, —É–º–∞, —Å—É–¥—å–±—ã, –∑–¥–æ—Ä–æ–≤—å—è, –¥–µ—Ç–µ–π, –±—Ä–∞–∫–∞. "
        "–û—Ç–¥–µ–ª—å–Ω–æ –æ–ø–∏—à–∏: –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ, –∑–¥–æ—Ä–æ–≤—å–µ, —Ñ–∏–Ω–∞–Ω—Å—ã, –ª—é–±–æ–≤—å, —Å—É–¥—å–±—É –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ. "
        "–ü–∏—à–∏ —Å —Ç–µ–ø–ª–æ—Ç–æ–π, –ø–æ–¥—Ä–æ–±–Ω–æ, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        "\n[–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–≤—É—Ö —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–µ–π, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ base64 —Ñ–∞–π–ª–æ–≤]"
    )
    # todo: —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–∏–ª–æ–∂–∏—Ç—å base64/—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    answer = await ask_gpt(prompt)
    await message.answer(answer)
    await state.finish()

# ========== –ì–æ—Ä–æ—Å–∫–æ–ø ==========
async def horoscope_start(message: types.Message, state: FSMContext):
    await state.set_state(Horoscope.waiting_birthdate.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.message_handler(state=Horoscope.waiting_birthdate)
async def horoscope_birthdate(message: types.Message, state: FSMContext):
    await state.update_data(birthdate=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:", reply_markup=horoscope_type_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("horo_"), state="*")
async def horoscope_period(callback_query: types.CallbackQuery, state: FSMContext):
    period = callback_query.data.replace("horo_", "")
    data = await state.get_data()
    date = data.get("birthdate")
    periods = {
        "today": "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "week": "–Ω–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–Ω–∞ –º–µ—Å—è—Ü",
        "year": "–Ω–∞ –≥–æ–¥"
    }
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ {periods[period]} –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è {date}. "
        "–£—á–∏—Ç—ã–≤–∞–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —Ç—Ä–∞–Ω–∑–∏—Ç—ã, –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏ –∞—Å–ø–µ–∫—Ç—ã. "
        "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –ü–∏—à–∏ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, —Å –∂–∏–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏, –±–µ–∑ –æ–±–æ–±—â–µ–Ω–∏–π."
    )
    answer = await ask_gpt(prompt)
    await callback_query.message.answer(answer)
    await state.finish()


# ========== –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ==========
async def natal_start(message: types.Message, state: FSMContext):
    await state.set_state(NatalChart.waiting_birthdate.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def natal_birthdate(message: types.Message, state: FSMContext):
    await state.update_data(birthdate=message.text)
    await state.set_state(NatalChart.waiting_time.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.")

async def natal_time(message: types.Message, state: FSMContext):
    await state.update_data(birthtime=message.text)
    await state.set_state(NatalChart.waiting_city.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.")

async def natal_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    date = data.get("birthdate")
    time = data.get("birthtime")
    city = message.text

    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ {date}, –≤—Ä–µ–º–µ–Ω–∏ {time}, –≥–æ—Ä–æ–¥—É {city}. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω–æ—Å—Ç—å, –∫–∞—Ä–º—É, —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ñ–∏–Ω–∞–Ω—Å—ã, –ª—é–±–æ–≤—å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. "
        "–£–∫–∞–∂–∏ –∞—Å–ø–µ–∫—Ç—ã, –¥–æ–º–∞, –ø–ª–∞–Ω–µ—Ç—ã. –ü–∏—à–∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ, –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Ñ–æ—Ä–º–µ."
    )
    answer = await ask_gpt(prompt)
    await message.answer(answer)
    await state.finish()
